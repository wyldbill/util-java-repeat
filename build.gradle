plugins {
    id 'java'
    id 'jacoco'
    id 'maven-publish'
    id 'signing'
    id 'org.sonarqube' version '3.4.0.2513'
//     id("io.github.gradle-nexus.publish-plugin") version "«version»"
}

group 'net.ltltd'
version '0.0.1'
//project.archivesBaseName = 'util-repeat'

sourceCompatibility = 11
targetCompatibility = 11

repositories {
    mavenCentral()
}

java {
    withJavadocJar()
    withSourcesJar()
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.1'
}

test {
    useJUnitPlatform()
}

sonarqube {
    properties {
        property "sonar.projectKey", "wyldbill_util-java-repeat"
        property "sonar.organization", "wyldbill"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.login", project.property('sonar_token')
    }
}

// Using the following setup, you can pass the key identifier, secret key (in ascii-armored format) and the password
// using the ORG_GRADLE_PROJECT_signingKeyId, ORG_GRADLE_PROJECT_signingKey and ORG_GRADLE_PROJECT_signingPassword
// environment variables respectively:

//signing {
//    def signingKeyId = findProperty("signingKeyId")
//    def signingKey = findProperty("signingKey")
//    def signingPassword = findProperty("signingPassword")
//    useInMemoryPgpKeys(signingKeyId, signingKey, signingPassword)
//    sign stuffZip
//}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'util-repeat'
            from components.java
            pom {
                name = 'LTLTD Utilities - Repeat'
                description = 'A small Java library which provides ways to repeat things'
                url = 'https://github.com/wyldbill/util-java-repeat'
                packaging = 'jar'
                properties = [
                        packaging: "jar"
                ]
                licenses {
                    license {
                        name = 'GNU GENERAL PUBLIC LICENSE - Version 3.0'
                        url = 'https://www.gnu.org/licenses/gpl-3.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'wyldbill'
                        name = 'William Dixon'
                        email = 'code@ltltd.net'
                        organization = 'Littlethunder Limited'
                        organizationUrl = 'https://github.com/wyldbill'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/wyldbill/util-java-repeat.git'
                    developerConnection = 'scm:git:ssh://github.com/wyldbill/util-java-repeat.git'
                    url = 'https://github.com/wyldbill/util-java-repeat'
                }
            }
            repositories {
                maven {
                    name = "GitHubPackages"
                    url = "https://maven.pkg.github.com/octocat/hello-world"
                    credentials {
                        username = project.property('gh_actor')
                        password = project.property('gh_token')
                    }
                }
            }
        }
    }
}

// Using the following setup, you can pass the key identifier, secret key (in ascii-armored format) and the password
// using the ORG_GRADLE_PROJECT_signingKeyId, ORG_GRADLE_PROJECT_signingKey and ORG_GRADLE_PROJECT_signingPassword
// environment variables respectively:

signing {
    def signingKeyId = findProperty("signingKeyId")
    def signingKey = findProperty("signingKey")
    def signingPassword = findProperty("signingPassword")
    useInMemoryPgpKeys(signingKeyId, signingKey, signingPassword)
    sign publishing.publications.mavenJava
}

test {
    finalizedBy jacocoTestReport // report is always generated after tests run
}
jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
}

jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled true
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
}
